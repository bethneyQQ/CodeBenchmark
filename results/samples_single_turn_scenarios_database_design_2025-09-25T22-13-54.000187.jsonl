{"doc_id": 0, "doc": {"id": "st_0009", "title": "Database schema design", "language": "sql", "scenario": "database_design", "difficulty": "intermediate", "context_mode": "domain_context", "prompt": "Design a database schema for an e-commerce platform.", "reference": ["-- E-commerce schema"], "tests": [{"cmd": "psql -d test_db -f tests/test_st_0009.sql", "file": "tests/test_st_0009.sql", "type": "schema"}], "metadata": {"author": "system", "license": "MIT", "memory_limit_mb": 200, "seed": 1242, "time_limit_s": 20}, "formatted_prompt": "Domain: database_design\n\nSpecialist Requirements:\nDomain-specific requirements for database_design:\n- Apply appropriate normalization techniques\n- Design efficient indexing strategies\n- Consider ACID properties and transaction management\n- Plan for data migration and schema evolution\n\nProblem:\nDesign a database schema for an e-commerce platform.", "_context_applied": "domain_context", "_processed": true}, "target": "-- E-commerce schema", "arguments": {"gen_args_0": {"arg_0": "Domain: database_design\n\nSpecialist Requirements:\nDomain-specific requirements for database_design:\n- Apply appropriate normalization techniques\n- Design efficient indexing strategies\n- Consider ACID properties and transaction management\n- Plan for data migration and schema evolution\n\nProblem:\nDesign a database schema for an e-commerce platform.", "arg_1": {"temperature": 0.0, "max_gen_toks": 1024, "until": [], "do_sample": false}}}, "resps": [["To design a database schema for an e-commerce platform, we can follow these steps:\n\n1. **Identify the Entities and their Relationships**:\n   - **Users**: Stores user information (e.g., name, email, password, address, phone number).\n   - **Products**: Stores product details (e.g., name, description, price, category, inventory).\n   - **Orders**: Stores order information (e.g., order date, status, total amount).\n   - **Order Items**: Stores the individual items in an order (e.g., product, quantity, price).\n   - **Categories**: Stores the product categories (e.g., electronics, clothing, books).\n   - **Carts**: Stores the items in a user's shopping cart.\n\n2. **Apply Normalization Techniques**:\n   - **First Normal Form (1NF)**: Ensure that all attributes are atomic and there are no repeating groups.\n   - **Second Normal Form (2NF)**: Ensure that all non-key attributes are fully dependent on the primary key.\n   - **Third Normal Form (3NF)**: Ensure that there are no transitive dependencies, and all non-key attributes are directly dependent on the primary key.\n\n3. **Design Efficient Indexing Strategies**:\n   - Create indexes on columns that are frequently used in `WHERE`, `JOIN`, and `ORDER BY` clauses, such as:\n     - `users.email` (for user lookup)\n     - `products.name` (for product search)\n     - `orders.order_date` (for order history)\n     - `order_items.product_id` (for order details)\n\n4. **Consider ACID Properties and Transaction Management**:\n   - Ensure that the database design supports ACID (Atomicity, Consistency, Isolation, Durability) properties.\n   - Identify the critical operations that require transactions, such as placing an order, updating the cart, and managing inventory.\n\n5. **Plan for Data Migration and Schema Evolution**:\n   - Design the schema with future growth and changes in mind.\n   - Implement a versioning system for the schema to handle schema changes and data migration.\n   - Ensure that the schema can accommodate new features and requirements without major restructuring.\n\nHere's an example of the database schema:\n\n```\nusers\n- id (PK)\n- name\n- email (unique)\n- password\n- address\n- phone\n\nproducts\n- id (PK)\n- name\n- description\n- price\n- category_id (FK)\n- inventory\n\ncategories\n- id (PK)\n- name\n\norders\n- id (PK)\n- user_id (FK)\n- order_date\n- total_amount\n- status\n\norder_items\n- id (PK)\n- order_id (FK)\n- product_id (FK)\n- quantity\n- price\n\ncarts\n- id (PK)\n- user_id (FK)\n- product_id (FK)\n- quantity\n```\n\nThis schema covers the core entities and their relationships for an e-commerce platform. You can further refine and extend it based on your specific requirements, such as adding support for reviews, discounts, and payment methods.\n\nRemember to consider the ACID properties, indexing strategies, and plan for data migration and schema evolution as your e-commerce platform grows and evolves."]], "filtered_resps": ["users\n- id (PK)\n- name\n- email (unique)\n- password\n- address\n- phone\n\nproducts\n- id (PK)\n- name\n- description\n- price\n- category_id (FK)\n- inventory\n\ncategories\n- id (PK)\n- name\n\norders\n- id (PK)\n- user_id (FK)\n- order_date\n- total_amount\n- status\n\norder_items\n- id (PK)\n- order_id (FK)\n- product_id (FK)\n- quantity\n- price\n\ncarts\n- id (PK)\n- user_id (FK)\n- product_id (FK)\n- quantity"], "filter": "extract_code", "metrics": ["bypass"], "doc_hash": "e2546d1279b28c21c23b995d2eae65e9f8f35e514ff5f69a7fcc27d8d3223f60", "prompt_hash": "1d32ad8fb92e3734c65cb64f24f50e2381ef9f99925c5c02369de91d2a4ee959", "target_hash": "bc48baf670a2019b9f45c917a0167376ed510569c0e91bbc3f55c60af6542a1c", "bypass": null}
