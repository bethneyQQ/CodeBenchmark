version: '3.8'

services:
  # Main evaluation engine service
  ai-evaluation-engine:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-eval-engine
    volumes:
      - ./results:/app/results
      - ./logs:/app/logs
      - ./cache:/app/cache
      - ./.env:/app/.env
    environment:
      - PYTHONPATH=/app
      - DOCKER_HOST=unix:///var/run/docker.sock
    ports:
      - "8000:8000"  # API server
      - "8888:8888"  # Jupyter notebook
    depends_on:
      - redis
      - postgres
    networks:
      - ai-eval-network

  # Redis for caching and task queuing
  redis:
    image: redis:7-alpine
    container_name: ai-eval-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-eval-network

  # PostgreSQL for result storage
  postgres:
    image: postgres:15-alpine
    container_name: ai-eval-postgres
    environment:
      POSTGRES_DB: ai_evaluation
      POSTGRES_USER: ai_eval_user
      POSTGRES_PASSWORD: ai_eval_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - ai-eval-network

  # Code execution sandbox containers
  python-sandbox:
    build:
      context: ./lm_eval/tasks/single_turn_scenarios/docker
      dockerfile: python.Dockerfile
    image: ai-eval-python:latest
    container_name: ai-eval-python-sandbox
    network_mode: none  # No network access for security
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    profiles:
      - sandbox

  node-sandbox:
    build:
      context: ./lm_eval/tasks/single_turn_scenarios/docker
      dockerfile: node.Dockerfile
    image: ai-eval-node:latest
    container_name: ai-eval-node-sandbox
    network_mode: none
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    profiles:
      - sandbox

  java-sandbox:
    build:
      context: ./lm_eval/tasks/single_turn_scenarios/docker
      dockerfile: java.Dockerfile
    image: ai-eval-java:latest
    container_name: ai-eval-java-sandbox
    network_mode: none
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    profiles:
      - sandbox

  # Monitoring and observability
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-eval-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - ai-eval-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: ai-eval-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - ai-eval-network
    profiles:
      - monitoring

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  ai-eval-network:
    driver: bridge