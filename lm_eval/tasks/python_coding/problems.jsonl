{"category": "code_completion", "context": "Google Python Style Guide: Use descriptive variable names (minimum 3 characters), add type hints for all parameters and return values, include docstrings for all functions. Maximum line length 80 characters. Use snake_case for variables and functions.", "context_type": "style_guide", "incomplete_code": "def calc(x, y):\n    # Complete this function to add two numbers", "expected_completion": "\"\"\"Add two numbers together.\n    \n    Args:\n        x (int): First number\n        y (int): Second number\n        \n    Returns:\n        int: Sum of x and y\n    \"\"\"\n    return x + y"}
{"category": "code_completion", "context": "Enterprise Security Policy: All user inputs must be validated using isinstance() or similar checks. Implement proper error handling with try/except blocks. Log all errors. Never use eval() or exec(). No hardcoded credentials.", "context_type": "security_policy", "incomplete_code": "def process_user_input(data):\n    # Complete this function to safely process user data", "expected_completion": "try:\n        if not isinstance(data, (str, int, float)):\n            raise ValueError(\"Invalid input type\")\n        \n        # Process the validated data\n        result = str(data).strip()\n        return result\n    except Exception as e:\n        logging.error(f\"Error processing input: {e}\")\n        raise"}
{"category": "code_completion", "context": "Performance Requirements: Use list comprehensions instead of loops when possible. Avoid nested loops. Use built-in functions like sum(), max(), min(). Memory usage should be optimized for large datasets.", "context_type": "performance_requirements", "incomplete_code": "def get_even_squares(numbers):\n    # Complete using list comprehension", "expected_completion": "return [x**2 for x in numbers if x % 2 == 0]"}
{"category": "code_repair", "context": "Google Python Style Guide: Functions must have descriptive names and docstrings. Use type hints. Variables should be snake_case with descriptive names.", "context_type": "style_guide", "buggy_code": "def f(x):\n    return x*2", "error_description": "Function lacks proper naming, docstring, and type hints", "fixed_code": "def double_number(input_value: int) -> int:\n    \"\"\"Double the input number.\n    \n    Args:\n        input_value (int): The number to double\n        \n    Returns:\n        int: The doubled value\n    \"\"\"\n    return input_value * 2"}
{"category": "code_repair", "context": "Enterprise Security Policy: All functions must validate inputs and handle errors properly. Use logging for error tracking.", "context_type": "security_policy", "buggy_code": "def divide(a, b):\n    return a / b", "error_description": "No input validation or error handling for division by zero", "fixed_code": "import logging\n\ndef divide(dividend: float, divisor: float) -> float:\n    \"\"\"Safely divide two numbers.\"\"\"\n    try:\n        if not isinstance(dividend, (int, float)) or not isinstance(divisor, (int, float)):\n            raise TypeError(\"Arguments must be numbers\")\n        if divisor == 0:\n            raise ValueError(\"Cannot divide by zero\")\n        return dividend / divisor\n    except Exception as e:\n        logging.error(f\"Division error: {e}\")\n        raise"}
{"category": "function_generation", "context": "Google Python Style Guide: Use descriptive function and variable names, include comprehensive docstrings with Args and Returns sections, add type hints for all parameters.", "context_type": "style_guide", "function_description": "Create a function to calculate the area of a rectangle", "requirements": "Function should take width and height as parameters", "expected_function": "def calculate_rectangle_area(width: float, height: float) -> float:\n    \"\"\"Calculate the area of a rectangle.\n    \n    Args:\n        width (float): The width of the rectangle\n        height (float): The height of the rectangle\n        \n    Returns:\n        float: The area of the rectangle\n    \"\"\"\n    return width * height", "test_cases": ["assert calculate_rectangle_area(5.0, 3.0) == 15.0", "assert calculate_rectangle_area(2.5, 4.0) == 10.0", "assert calculate_rectangle_area(0, 5) == 0"]}
{"category": "function_generation", "context": "Enterprise Security Policy: Validate all inputs, implement error handling, use logging for errors, never trust user input without validation.", "context_type": "security_policy", "function_description": "Create a function to validate and process email addresses", "requirements": "Function should validate email format and handle errors", "expected_function": "import re\nimport logging\n\ndef validate_email_address(email_input: str) -> str:\n    \"\"\"Validate and process an email address.\n    \n    Args:\n        email_input (str): The email address to validate\n        \n    Returns:\n        str: The validated email address\n        \n    Raises:\n        ValueError: If email format is invalid\n        TypeError: If input is not a string\n    \"\"\"\n    try:\n        if not isinstance(email_input, str):\n            raise TypeError(\"Email must be a string\")\n        \n        email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n        if not re.match(email_pattern, email_input.strip()):\n            raise ValueError(\"Invalid email format\")\n        \n        return email_input.strip().lower()\n    except Exception as e:\n        logging.error(f\"Email validation error: {e}\")\n        raise", "test_cases": ["assert validate_email_address('test@example.com') == 'test@example.com'", "assert validate_email_address('  USER@DOMAIN.COM  ') == 'user@domain.com'", "try:\n    validate_email_address('invalid-email')\n    assert False, 'Should raise ValueError'\nexcept ValueError:\n    pass"]}
{"category": "docstring_generation", "context": "Google Python Style Guide: Docstrings must include a brief description, Args section with type information, Returns section with type and description, and Raises section if applicable.", "context_type": "style_guide", "function_code": "def find_maximum_value(number_list, default_value=None):\n    if not number_list:\n        return default_value\n    return max(number_list)", "expected_docstring": "\"\"\"Find the maximum value in a list of numbers.\n    \n    Args:\n        number_list (List[Union[int, float]]): List of numbers to search\n        default_value (Optional[Union[int, float]]): Value to return if list is empty\n        \n    Returns:\n        Union[int, float, None]: The maximum value from the list, or default_value if empty\n    \"\"\""}
{"category": "code_translation", "context": "Google Python Style Guide: Translated code must follow Python naming conventions (snake_case), include type hints, and have proper docstrings.", "context_type": "style_guide", "source_language": "JavaScript", "source_code": "function calculateTotal(items) {\n    let total = 0;\n    for (let i = 0; i < items.length; i++) {\n        total += items[i].price;\n    }\n    return total;\n}", "target_code": "from typing import List, Dict, Union\n\ndef calculate_total_price(items: List[Dict[str, Union[int, float]]]) -> float:\n    \"\"\"Calculate the total price of items.\n    \n    Args:\n        items (List[Dict[str, Union[int, float]]]): List of item dictionaries with price keys\n        \n    Returns:\n        float: The total price of all items\n    \"\"\"\n    total_price = 0.0\n    for item in items:\n        total_price += item['price']\n    return total_price"}