{"id": "code_completion_001", "scenario": "code_completion", "difficulty": "simple", "language": "python", "context_mode": "minimal_context", "problem": "Complete the following function that calculates the factorial of a number:", "code_template": "def factorial(n):\n    # TODO: Implement factorial calculation\n    pass", "expected_output": "def factorial(n):\n    if n <= 1:\n        return 1\n    return n * factorial(n - 1)", "test_cases": [{"input": 5, "expected": 120}, {"input": 0, "expected": 1}, {"input": 3, "expected": 6}]}
{"id": "code_completion_002", "scenario": "code_completion", "difficulty": "intermediate", "language": "python", "context_mode": "full_context", "problem": "Complete the binary search function in a sorted array:", "code_template": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    # TODO: Implement binary search logic\n    pass", "expected_output": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1", "test_cases": [{"input": [[1, 2, 3, 4, 5], 3], "expected": 2}, {"input": [[1, 2, 3, 4, 5], 6], "expected": -1}]}
{"id": "code_completion_003", "scenario": "code_completion", "difficulty": "complex", "language": "javascript", "context_mode": "domain_context", "problem": "Complete the async function that fetches data with retry logic:", "code_template": "async function fetchWithRetry(url, maxRetries = 3) {\n    // TODO: Implement fetch with exponential backoff retry\n    pass\n}", "expected_output": "async function fetchWithRetry(url, maxRetries = 3) {\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n        try {\n            const response = await fetch(url);\n            if (response.ok) return response;\n            throw new Error(`HTTP ${response.status}`);\n        } catch (error) {\n            if (attempt === maxRetries) throw error;\n            await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000));\n        }\n    }\n}", "test_cases": [{"input": "https://api.example.com/data", "expected": "successful_response"}]}