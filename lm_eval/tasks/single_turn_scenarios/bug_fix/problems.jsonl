{"id": "bug_fix_001", "scenario": "bug_fix", "difficulty": "simple", "language": "python", "context_mode": "minimal_context", "problem": "Fix the bug in this function that should return the maximum of two numbers:", "buggy_code": "def max_of_two(a, b):\n    if a > b:\n        return b\n    else:\n        return a", "expected_output": "def max_of_two(a, b):\n    if a > b:\n        return a\n    else:\n        return b", "bug_description": "Function returns minimum instead of maximum", "test_cases": [{"input": [5, 3], "expected": 5}, {"input": [1, 7], "expected": 7}]}
{"id": "bug_fix_002", "scenario": "bug_fix", "difficulty": "intermediate", "language": "python", "context_mode": "full_context", "problem": "Fix the off-by-one error in this list indexing function:", "buggy_code": "def get_last_element(lst):\n    if len(lst) == 0:\n        return None\n    return lst[len(lst)]", "expected_output": "def get_last_element(lst):\n    if len(lst) == 0:\n        return None\n    return lst[len(lst) - 1]", "bug_description": "Index out of bounds error due to off-by-one mistake", "test_cases": [{"input": [[1, 2, 3]], "expected": 3}, {"input": [[]], "expected": null}]}
{"id": "bug_fix_003", "scenario": "bug_fix", "difficulty": "complex", "language": "python", "context_mode": "domain_context", "problem": "Fix the SQL injection vulnerability in this database query function:", "buggy_code": "def get_user_data(user_id):\n    query = f\"SELECT * FROM users WHERE id = {user_id}\"\n    return execute_query(query)", "expected_output": "def get_user_data(user_id):\n    query = \"SELECT * FROM users WHERE id = %s\"\n    return execute_query(query, (user_id,))", "bug_description": "SQL injection vulnerability due to string formatting", "security_issue": true, "test_cases": [{"input": 123, "expected": "user_data_for_123"}]}