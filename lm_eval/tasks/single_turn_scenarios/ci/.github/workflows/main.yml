name: Single Turn Scenarios CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'lm_eval/tasks/single_turn_scenarios/**'
      - '.github/workflows/single-turn-scenarios.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'lm_eval/tasks/single_turn_scenarios/**'
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.8'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set up Docker (Linux)
      if: runner.os == 'Linux'
      uses: docker/setup-buildx-action@v3
    
    - name: Set up Docker (Windows)
      if: runner.os == 'Windows'
      run: |
        # Enable Docker Desktop on Windows runners
        echo "Docker setup for Windows"
    
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential nodejs npm openjdk-11-jdk
        # Install Go
        wget https://go.dev/dl/go1.21.0.linux-amd64.tar.gz
        sudo tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz
        echo "/usr/local/go/bin" >> $GITHUB_PATH
        # Install Rust
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source ~/.cargo/env
    
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install node openjdk go rust
    
    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install nodejs openjdk golang rust -y
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov pytest-xdist
        pip install -r lm_eval/tasks/single_turn_scenarios/requirements.txt
    
    - name: Build Docker images
      if: runner.os == 'Linux'
      run: |
        cd lm_eval/tasks/single_turn_scenarios/docker
        docker build -f python.Dockerfile -t sts-python .
        docker build -f node.Dockerfile -t sts-node .
        docker build -f java.Dockerfile -t sts-java .
        docker build -f gcc.Dockerfile -t sts-gcc .
        docker build -f go.Dockerfile -t sts-go .
        docker build -f rust.Dockerfile -t sts-rust .
    
    - name: Run linting and code quality checks
      run: |
        pip install flake8 black isort mypy
        cd lm_eval/tasks/single_turn_scenarios
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check .
        isort --check-only .
        mypy . --ignore-missing-imports
    
    - name: Run unit tests
      run: |
        cd lm_eval/tasks/single_turn_scenarios
        python -m pytest tests/unit/ -v --cov=. --cov-report=xml
    
    - name: Run integration tests (Linux only)
      if: runner.os == 'Linux'
      run: |
        cd lm_eval/tasks/single_turn_scenarios
        python -m pytest tests/integration/ -v -x
    
    - name: Run security tests (Linux only)
      if: runner.os == 'Linux'
      run: |
        cd lm_eval/tasks/single_turn_scenarios
        python -m pytest tests/security/ -v -x
    
    - name: Upload coverage reports
      if: runner.os == 'Linux' && matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./lm_eval/tasks/single_turn_scenarios/coverage.xml
        flags: single-turn-scenarios
        name: codecov-umbrella
    
    - name: Test CLI integration
      run: |
        # Test basic CLI functionality
        python -m lm_eval --tasks single_turn_scenarios_code_completion --limit 1 --output_path test_output
        python -m lm_eval --tasks single_turn_scenarios_suite --limit 1 --output_path test_output_suite
    
    - name: Validate configuration files
      run: |
        cd lm_eval/tasks/single_turn_scenarios
        python validate_config.py
        python validate_problems.py
        python check_integrity.py

  security-audit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install security tools
      run: |
        pip install safety bandit semgrep
    
    - name: Run safety check
      run: |
        cd lm_eval/tasks/single_turn_scenarios
        safety check -r requirements.txt
    
    - name: Run bandit security scan
      run: |
        cd lm_eval/tasks/single_turn_scenarios
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Run semgrep security scan
      run: |
        cd lm_eval/tasks/single_turn_scenarios
        semgrep --config=auto . --json --output=semgrep-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          lm_eval/tasks/single_turn_scenarios/bandit-report.json
          lm_eval/tasks/single_turn_scenarios/semgrep-report.json

  documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install documentation dependencies
      run: |
        pip install sphinx sphinx-rtd-theme
    
    - name: Check documentation completeness
      run: |
        cd lm_eval/tasks/single_turn_scenarios
        # Check that all required documentation files exist
        test -f README.md
        test -f CLI_USAGE.md
        test -f SECURITY_BEST_PRACTICES.md
        test -f LICENSING_COMPLIANCE.md
        test -f analysis_tools/README.md
        test -f tests/README.md
    
    - name: Validate markdown links
      run: |
        pip install markdown-link-check || npm install -g markdown-link-check
        find lm_eval/tasks/single_turn_scenarios -name "*.md" -exec markdown-link-check {} \;