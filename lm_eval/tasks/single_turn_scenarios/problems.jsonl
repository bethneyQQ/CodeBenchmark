{"id": "st_0001", "title": "Reverse linked list", "language": "python", "scenario": "algorithm_implementation", "difficulty": "intermediate", "context_mode": "minimal_context", "prompt": "Implement a function `reverse_list(head)` that takes the head of a singly linked list and returns the head of the reversed list. The function should reverse the list in-place with O(n) time complexity and O(1) space complexity.", "reference": ["def reverse_list(head):\n    prev = None\n    current = head\n    while current:\n        next_node = current.next\n        current.next = prev\n        prev = current\n        current = next_node\n    return prev"], "tests": [{"type": "unit", "file": "tests/test_st_0001.py", "cmd": "python -m pytest tests/test_st_0001.py -v"}], "metadata": {"time_limit_s": 10, "memory_limit_mb": 200, "seed": 1234, "author": "system", "license": "MIT"}}
{"id": "st_0002", "title": "FizzBuzz implementation", "language": "python", "scenario": "function_generation", "difficulty": "simple", "context_mode": "no_context", "prompt": "Write a function `fizzbuzz(n)` that returns a list of strings from 1 to n, where multiples of 3 are replaced with 'Fizz', multiples of 5 with 'Buzz', and multiples of both with 'FizzBuzz'.", "reference": ["def fizzbuzz(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 15 == 0:\n            result.append('FizzBuzz')\n        elif i % 3 == 0:\n            result.append('Fizz')\n        elif i % 5 == 0:\n            result.append('Buzz')\n        else:\n            result.append(str(i))\n    return result"], "tests": [{"type": "unit", "file": "tests/test_st_0002.py", "cmd": "python -m pytest tests/test_st_0002.py -v"}], "metadata": {"time_limit_s": 5, "memory_limit_mb": 100, "seed": 1235, "author": "system", "license": "MIT"}}
{"id": "st_0003", "title": "Binary search bug fix", "language": "python", "scenario": "bug_fix", "difficulty": "intermediate", "context_mode": "minimal_context", "prompt": "The following binary search implementation has a bug. Fix the bug and return the corrected code.", "reference": ["def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"], "tests": [{"type": "unit", "file": "tests/test_st_0003.py", "cmd": "python -m pytest tests/test_st_0003.py -v"}], "metadata": {"time_limit_s": 10, "memory_limit_mb": 150, "seed": 1236, "author": "system", "license": "MIT"}}
{"id": "st_0004", "title": "Python to JavaScript translation", "language": "javascript", "scenario": "code_translation", "difficulty": "simple", "context_mode": "minimal_context", "prompt": "Translate the following Python function to JavaScript.", "reference": ["function calculateFactorial(n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * calculateFactorial(n - 1);\n}"], "tests": [{"type": "unit", "file": "tests/test_st_0004.js", "cmd": "node tests/test_st_0004.js"}], "metadata": {"time_limit_s": 5, "memory_limit_mb": 100, "seed": 1237, "author": "system", "license": "MIT"}}
{"id": "st_0005", "title": "API design for user management", "language": "python", "scenario": "api_design", "difficulty": "complex", "context_mode": "full_context", "prompt": "Design a RESTful API for user management with authentication and role-based access control.", "reference": ["# Flask API implementation"], "tests": [{"type": "integration", "file": "tests/test_st_0005.py", "cmd": "python -m pytest tests/test_st_0005.py -v"}], "metadata": {"time_limit_s": 30, "memory_limit_mb": 300, "seed": 1238, "author": "system", "license": "MIT"}}
{"id": "st_0006", "title": "Function documentation generation", "language": "python", "scenario": "documentation", "difficulty": "simple", "context_mode": "minimal_context", "prompt": "Generate comprehensive docstring documentation for a merge function.", "reference": ["# Documented function"], "tests": [{"type": "docstring", "file": "tests/test_st_0006.py", "cmd": "python -m pytest tests/test_st_0006.py -v"}], "metadata": {"time_limit_s": 10, "memory_limit_mb": 100, "seed": 1239, "author": "system", "license": "MIT"}}
{"id": "st_0007", "title": "Simple code completion", "language": "python", "scenario": "code_completion", "difficulty": "simple", "context_mode": "no_context", "prompt": "Complete a function that calculates the sum of even numbers in a list.", "reference": ["def sum_even_numbers(numbers):\n    total = 0\n    for num in numbers:\n        if num % 2 == 0:\n            total += num\n    return total"], "tests": [{"type": "unit", "file": "tests/test_st_0007.py", "cmd": "python -m pytest tests/test_st_0007.py -v"}], "metadata": {"time_limit_s": 5, "memory_limit_mb": 100, "seed": 1240, "author": "system", "license": "MIT"}}
{"id": "st_0008", "title": "Complex system design", "language": "python", "scenario": "system_design", "difficulty": "complex", "context_mode": "full_context", "prompt": "Design a distributed caching system with consistent hashing and replication.", "reference": ["# Distributed cache implementation"], "tests": [{"type": "integration", "file": "tests/test_st_0008.py", "cmd": "python -m pytest tests/test_st_0008.py -v"}], "metadata": {"time_limit_s": 60, "memory_limit_mb": 500, "seed": 1241, "author": "system", "license": "MIT"}}
{"id": "st_0009", "title": "Database schema design", "language": "sql", "scenario": "database_design", "difficulty": "intermediate", "context_mode": "domain_context", "prompt": "Design a database schema for an e-commerce platform.", "reference": ["-- E-commerce schema"], "tests": [{"type": "schema", "file": "tests/test_st_0009.sql", "cmd": "psql -d test_db -f tests/test_st_0009.sql"}], "metadata": {"time_limit_s": 20, "memory_limit_mb": 200, "seed": 1242, "author": "system", "license": "MIT"}}
{"id": "st_0010", "title": "Performance optimization", "language": "python", "scenario": "performance_optimization", "difficulty": "complex", "context_mode": "domain_context", "prompt": "Optimize a prime number sieve algorithm for better performance.", "reference": ["# Optimized sieve implementation"], "tests": [{"type": "performance", "file": "tests/test_st_0010.py", "cmd": "python -m pytest tests/test_st_0010.py -v"}], "metadata": {"time_limit_s": 30, "memory_limit_mb": 400, "seed": 1243, "author": "system", "license": "MIT"}}
{"id": "st_0011", "title": "Full-stack web application", "language": "python", "scenario": "full_stack", "difficulty": "complex", "context_mode": "full_context", "prompt": "Create a complete full-stack web application for a blog system.", "reference": ["# Full-stack implementation"], "tests": [{"type": "integration", "file": "tests/test_st_0011.py", "cmd": "python -m pytest tests/test_st_0011.py -v"}], "metadata": {"time_limit_s": 45, "memory_limit_mb": 400, "seed": 1244, "author": "system", "license": "MIT"}}
{"id": "st_0012", "title": "Testing strategy implementation", "language": "python", "scenario": "testing_strategy", "difficulty": "intermediate", "context_mode": "domain_context", "prompt": "Design and implement a comprehensive testing strategy for a calculator class.", "reference": ["# Testing strategy implementation"], "tests": [{"type": "comprehensive", "file": "tests/test_st_0012.py", "cmd": "python -m pytest tests/test_st_0012.py -v"}], "metadata": {"time_limit_s": 25, "memory_limit_mb": 300, "seed": 1245, "author": "system", "license": "MIT"}}
{"id": "st_0013", "title": "Security vulnerability assessment", "language": "python", "scenario": "security", "difficulty": "complex", "context_mode": "domain_context", "prompt": "Analyze and fix security vulnerabilities in a web application.", "reference": ["# Secure implementation"], "tests": [{"type": "security", "file": "tests/test_st_0013.py", "cmd": "python -m pytest tests/test_st_0013.py -v"}], "metadata": {"time_limit_s": 40, "memory_limit_mb": 400, "seed": 1246, "author": "system", "license": "MIT"}}
{"id": "st_0014", "title": "Java algorithm implementation", "language": "java", "scenario": "algorithm_implementation", "difficulty": "intermediate", "context_mode": "minimal_context", "prompt": "Implement a Java class for a binary search tree with insert, search, and delete operations.", "reference": ["// BST implementation"], "tests": [{"type": "unit", "file": "tests/test_st_0014.java", "cmd": "javac tests/test_st_0014.java && java -cp tests test_st_0014"}], "metadata": {"time_limit_s": 15, "memory_limit_mb": 250, "seed": 1247, "author": "system", "license": "MIT"}}
{"id": "st_0015", "title": "C++ performance optimization", "language": "cpp", "scenario": "performance_optimization", "difficulty": "complex", "context_mode": "domain_context", "prompt": "Optimize C++ matrix multiplication using SIMD and parallel processing.", "reference": ["// Optimized matrix multiplication"], "tests": [{"type": "performance", "file": "tests/test_st_0015.cpp", "cmd": "g++ -O3 -fopenmp -mavx2 tests/test_st_0015.cpp -o test_st_0015 && ./test_st_0015"}], "metadata": {"time_limit_s": 25, "memory_limit_mb": 400, "seed": 1248, "author": "system", "license": "MIT"}}
{"id": "st_0016", "title": "Go concurrent web server", "language": "go", "scenario": "system_design", "difficulty": "complex", "context_mode": "full_context", "prompt": "Design and implement a concurrent web server in Go with middleware support.", "reference": ["// Go web server implementation"], "tests": [{"type": "integration", "file": "tests/test_st_0016.go", "cmd": "go test -v tests/test_st_0016.go"}], "metadata": {"time_limit_s": 20, "memory_limit_mb": 300, "seed": 1249, "author": "system", "license": "MIT"}}
{"id": "st_0017", "title": "Rust memory-safe data structure", "language": "rust", "scenario": "algorithm_implementation", "difficulty": "complex", "context_mode": "domain_context", "prompt": "Implement a thread-safe, memory-efficient LRU cache in Rust.", "reference": ["// Rust LRU cache implementation"], "tests": [{"type": "unit", "file": "tests/test_st_0017.rs", "cmd": "cargo test --manifest-path tests/Cargo.toml"}], "metadata": {"time_limit_s": 30, "memory_limit_mb": 350, "seed": 1250, "author": "system", "license": "MIT"}}
{"id": "st_0018", "title": "Simple code completion - JavaScript", "language": "javascript", "scenario": "code_completion", "difficulty": "simple", "context_mode": "no_context", "prompt": "Complete a JavaScript function that finds the maximum value in an array.", "reference": ["function findMax(arr) {\n    if (arr.length === 0) return null;\n    let max = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}"], "tests": [{"type": "unit", "file": "tests/test_st_0018.js", "cmd": "node tests/test_st_0018.js"}], "metadata": {"time_limit_s": 5, "memory_limit_mb": 100, "seed": 1251, "author": "system", "license": "MIT"}}
{"id": "st_0019", "title": "Bug fix with domain context", "language": "python", "scenario": "bug_fix", "difficulty": "intermediate", "context_mode": "domain_context", "prompt": "Fix the bug in a financial calculation function for compound interest.", "reference": ["# Fixed compound interest function"], "tests": [{"type": "unit", "file": "tests/test_st_0019.py", "cmd": "python -m pytest tests/test_st_0019.py -v"}], "metadata": {"time_limit_s": 10, "memory_limit_mb": 150, "seed": 1252, "author": "system", "license": "MIT"}}
{"id": "st_0020", "title": "Code translation with full context", "language": "java", "scenario": "code_translation", "difficulty": "intermediate", "context_mode": "full_context", "prompt": "Translate Python data processing function to Java following enterprise best practices.", "reference": ["// Java enterprise implementation"], "tests": [{"type": "unit", "file": "tests/test_st_0020.java", "cmd": "javac tests/test_st_0020.java && java -cp tests test_st_0020"}], "metadata": {"time_limit_s": 15, "memory_limit_mb": 250, "seed": 1253, "author": "system", "license": "MIT"}}
{"id": "st_0021", "title": "Documentation with domain context", "language": "python", "scenario": "documentation", "difficulty": "intermediate", "context_mode": "domain_context", "prompt": "Generate comprehensive API documentation for a machine learning model training function.", "reference": ["# Documented ML function"], "tests": [{"type": "docstring", "file": "tests/test_st_0021.py", "cmd": "python -m pytest tests/test_st_0021.py::test_docstring_examples -v"}], "metadata": {"time_limit_s": 15, "memory_limit_mb": 200, "seed": 1254, "author": "system", "license": "MIT"}}